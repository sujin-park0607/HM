{"ast":null,"code":"//동기식 방식 ( async await 사용!!!!!)\nexport const fetchRegister = async id => {\n  const response = await fetch(\"http://localhost:8000/api/login/\");\n\n  if (response.ok) {\n    //서버통신이 성공적으로 이루어지면 users에 json값 대입\n    const users = await response.json(); //users안 객체들을 순회하면서 그 객체들의 id값과 form 컴포넌트에서 받음 account의 id값과 비교\n    //서로 일치하는 것만 user에 대입\n\n    const user = users.find(user => user.api_id === id); //모든게 일치하면 그 user 정보 return -> 이 return값이 form 컴포넌트 내 fetchLogin 함수 값으로 출력되는것\n    //form 컴포넌트에서 setUser값에 넣어야함\n\n    return user;\n  } //서버 통신이 안이루어졌을떄\n\n\n  throw new Error(\"서버 통신이 원할하지 않습니다.\");\n};","map":{"version":3,"names":["fetchRegister","id","response","fetch","ok","users","json","user","find","api_id","Error"],"sources":["C:/sujinworkspace/test_capstone/peoplecountfrount/src/pages/api/PatchRegister.js"],"sourcesContent":["//동기식 방식 ( async await 사용!!!!!)\nexport const fetchRegister = async ( id ) => {\n  const response = await fetch(\"http://localhost:8000/api/login/\");\n  \n  if (response.ok) {\n      //서버통신이 성공적으로 이루어지면 users에 json값 대입\n    const users = await response.json();\n\n    //users안 객체들을 순회하면서 그 객체들의 id값과 form 컴포넌트에서 받음 account의 id값과 비교\n    //서로 일치하는 것만 user에 대입\n    const user = users.find((user) => user.api_id === id);\n    //모든게 일치하면 그 user 정보 return -> 이 return값이 form 컴포넌트 내 fetchLogin 함수 값으로 출력되는것\n    //form 컴포넌트에서 setUser값에 넣어야함\n    return user;\n  }\n\n  //서버 통신이 안이루어졌을떄\n  throw new Error(\"서버 통신이 원할하지 않습니다.\");\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAQC,EAAR,IAAgB;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,CAA5B;;EAEA,IAAID,QAAQ,CAACE,EAAb,EAAiB;IACb;IACF,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB,CAFe,CAIf;IACA;;IACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACE,MAAL,KAAgBR,EAArC,CAAb,CANe,CAOf;IACA;;IACA,OAAOM,IAAP;EACD,CAb0C,CAe3C;;;EACA,MAAM,IAAIG,KAAJ,CAAU,mBAAV,CAAN;AACD,CAjBM"},"metadata":{},"sourceType":"module"}